## TensorFlow 线性模型入门

在这篇入门指南里，将会使用tensorflow的tf.learn API 来解决二元分类问题：通过利用来自人口普查的数据(例如 年龄、性别、教育程度以及居住地，所谓的特征)，我们去尝试判断一个特定的人(给定上面的那些特征) 是否年收入超过50000美元(目标值)。我们会训练一个逻辑回归模型，当给定个体的相关信息，模型会输出一个[0,1]之间的数字，来表示该个体年收入超过50000美元的概率。

### 安装

在使用相关代码之前，需要：

* 安装tensorflow
* 获取代码，[google官方的代码](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/wide_n_deep_tutorial.py) 和 [另外一个更简单的实现代码](https://github.com/jingmca/tensorflow_learning/tree/master/liner_tutorials)
* 安装[pandas的数据分析库](http://pandas.pydata.org/), tf.learn本身并不需要pandas,但是tf对pandas提供了良好的支持,这篇文章的代码将会使用pandas。安装pandas的方式，
`	shell $ sudo pip install pandas`
* 执行代码先撸一遍看看效果:) 因为整个例子需要下载大约5M的数据文件，我已经打包放在[代码](https://github.com/jingmca/tensorflow_learning/tree/master/liner_tutorials)里了

1. google的代码
`	shell $ python wide_n_deep_tutorial.py --model_type=wide`

2. 我的代码
`	shell $ python tf_liner_tutorial.py`

接下来看看这几行代码是如何创建线性模型


### 加载普查数据

这里的数据集采用[Census Income Dataset](https://archive.ics.uci.edu/ml/datasets/Census+Income)，你可以单独从这里下载[training data](https://github.com/jingmca/tensorflow_learning/blob/master/liner_tutorials/adult.data)和[test data](https://github.com/jingmca/tensorflow_learning/blob/master/liner_tutorials/adult.test) 或者 使用下面的代码:
<pre><code>
import tempfile  
import urllib  
train_file = tempfile.NamedTemporaryFile()  
test_file = tempfile.NamedTemporaryFile()  
urllib.urlretrieve("http://mlr.cs.umass.edu/ml/machine-learning-databases/adult/adult.data", 
train_file.name)  
urllib.urlretrieve("http://mlr.cs.umass.edu/ml/machine-learning-databases/adult/adult.test",test_file.name)  </code>
</pre>
打开下载下来的csv文件，然而使用Pandas来加载它们，
<pre><code>import pandas as pd
COLUMNS = ["age", "workclass", "fnlwgt", "education", "education_num",
           "marital_status", "occupation", "relationship", "race", "gender",
           "capital_gain", "capital_loss", "hours_per_week", "native_country",
           "income_bracket"]
df_train = pd.read_csv(train_file, names=COLUMNS, skipinitialspace=True)
df_test = pd.read_csv(test_file, names=COLUMNS, skipinitialspace=True, skiprows=1)</code></pre>
既然是一个二分问题，我们可以构造一个“标签列”，它的值取决于收入超过50K则为1，反之为0。
<pre><code>LABEL_COLUMN = "label"
df_train[LABEL_COLUMN] = (df_train["income_bracket"].apply(lambda x: ">50K" in x)).astype(int)
df_test[LABEL_COLUMN] = (df_test["income_bracket"].apply(lambda x: ">50K" in x)).astype(int)</code></pre>
接下来，我们简单了解下数据表以及其中的哪些列可以用来预测目标值。所有的列可以分为两种类型——类别(离散量) 和 连续量：

+ 类别，如果它的取值是一个有限集合中的唯一元素值。例如，出身国籍（美国、日本、印度等）或 教育水平（高中，大学等）
+ 连续量，如果它的取值是在一个连续的区间中的一个数。例如，个体收入是一个连续量

<pre><code>CATEGORICAL_COLUMNS = ["workclass", "education", "marital_status", "occupation",
                       "relationship", "race", "gender", "native_country"]
CONTINUOUS_COLUMNS = ["age", "education_num", "capital_gain", "capital_loss", "hours_per_week"]</code></pre>
具体的列描述如下，
![census](census_frame.png)

